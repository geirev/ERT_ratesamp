!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
100	sample.F90	/^      100 rewind(10)$/;"	l	program:sample	file:
200	sample.F90	/^   200 close(10)$/;"	l	program:sample	file:
300	sample.F90	/^   300 close(10)$/;"	l	program:sample	file:
A	sample.F90	/^   type(wellrates), allocatable :: A(/;"	v	program:sample
B	sample.F90	/^   real, allocatable :: B(/;"	v	program:sample
cens	sample.F90	/^   character(len=4) cens$/;"	v	program:sample
ck	sample.F90	/^   character(len=4) ck$/;"	v	program:sample
cline	sample.F90	/^   character(len=100) cline$/;"	v	program:sample
cnoise	sample.F90	/^   character(len=1) cnoise$/;"	v	program:sample
cnx	sample.F90	/^   character(len=4) cnx$/;"	v	program:sample
controlpath	sample.F90	/^   character(len=200) controlpath$/;"	v	program:sample
cor1	sample.F90	/^   real :: cor1=/;"	v	program:sample
dq	sample.F90	/^   character, parameter :: dq /;"	v	program:sample
dx	sample.F90	/^   real dx$/;"	v	program:sample
ex	sample.F90	/^   logical ex$/;"	v	program:sample
gpr	sample.F90	/^      real gpr(/;"	k	type:wellrates
i	sample.F90	/^   in/;"	v	program:sample
ic	sample.F90	/^   integer i,j,k,l,m,ic,/;"	v	program:sample
idat	sample.F90	/^   integer idat$/;"	v	program:sample
ipos	sample.F90	/^   integer ipos(/;"	v	program:sample
istat	sample.F90	/^   integer istat$/;"	v	program:sample
iwell	sample.F90	/^   integer iwell$/;"	v	program:sample
j	sample.F90	/^   integer i,j,/;"	v	program:sample
j1	sample.F90	/^   integer i,j,k,l,m,ic,j1$/;"	v	program:sample
k	sample.F90	/^   integer i,j,k,/;"	v	program:sample
l	sample.F90	/^   integer i,j,k,l,/;"	v	program:sample
m	sample.F90	/^   integer i,j,k,l,m,/;"	v	program:sample
min_err	sample.F90	/^   real min_err$/;"	v	program:sample
n1	sample.F90	/^   integer n1 /;"	v	program:sample
noise	sample.F90	/^   integer noise$/;"	v	program:sample
nrens	sample.F90	/^   integer, parameter :: nrens=/;"	v	program:sample
nrvars	sample.F90	/^   integer, parameter :: nrvars=/;"	v	program:sample
nrwells	sample.F90	/^   integer :: nrwells /;"	v	program:sample
nx	sample.F90	/^   integer, parameter :: nx=/;"	v	program:sample
obshistfile	sample.F90	/^   character(len=100) :: obshistfile=/;"	v	program:sample
opr	sample.F90	/^      real opr(/;"	k	type:wellrates
priorpath	sample.F90	/^   character(len=100) :: priorpath=/;"	v	program:sample
rates	sample.F90	/^   type(wellrates)/;"	v	program:sample
rel_err	sample.F90	/^   real rel_err$/;"	v	program:sample
sample	sample.F90	/^program sample$/;"	p
schedulefile	sample.F90	/^   character(len=100) :: schedulefile=/;"	v	program:sample
stddev	sample.F90	/^   type(wellrates), allocatable :: rates(:),stddev(/;"	v	program:sample
string1	sample.F90	/^   character(len=200) string1$/;"	v	program:sample
string2	sample.F90	/^   character(len=200) string2$/;"	v	program:sample
string3	sample.F90	/^   character(len=200) string3$/;"	v	program:sample
string4	sample.F90	/^   character(len=200) string4$/;"	v	program:sample
tmp	sample.F90	/^   character(len=1) tmp$/;"	v	program:sample
var	sample.F90	/^   character(len=4) var$/;"	v	program:sample
well	sample.F90	/^   character(len=4) well$/;"	v	program:sample
wellname	sample.F90	/^      character(len=4)  wellname$/;"	k	type:wellrates
wellname	sample.F90	/^   character(len=8) wellname$/;"	v	program:sample
wellrates	sample.F90	/^   type wellrates$/;"	t	program:sample
wpr	sample.F90	/^      real wpr(/;"	k	type:wellrates
xlength	sample.F90	/^   real :: xlength=/;"	v	program:sample
